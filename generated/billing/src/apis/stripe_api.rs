/*
 * SaaSus Billing API Schema
 *
 * SaaSus Billing API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct StripeApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> StripeApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> StripeApiClient<C> {
        StripeApiClient {
            configuration,
        }
    }
}

pub trait StripeApi {
    fn delete_stripe_info(&self, ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn get_stripe_info(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::StripeInfo, Error>>>>;
    fn update_stripe_info(&self, update_stripe_info_param: Option<crate::models::UpdateStripeInfoParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
}

impl<C: hyper::client::connect::Connect>StripeApi for StripeApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn delete_stripe_info(&self, ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/stripe/info".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_stripe_info(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::StripeInfo, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/stripe/info".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_stripe_info(&self, update_stripe_info_param: Option<crate::models::UpdateStripeInfoParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/stripe/info".to_string())
        ;
        req = req.with_body_param(update_stripe_info_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
