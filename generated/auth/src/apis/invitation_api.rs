/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct InvitationApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> InvitationApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> InvitationApiClient<C> {
        InvitationApiClient {
            configuration,
        }
    }
}

pub trait InvitationApi {
    fn create_tenant_invitation(&self, tenant_id: &str, create_tenant_invitation_param: Option<crate::models::CreateTenantInvitationParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::Invitation, Error>>>>;
    fn delete_tenant_invitation(&self, tenant_id: &str, invitation_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn get_invitation_validity(&self, invitation_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::InvitationValidity, Error>>>>;
    fn get_tenant_invitation(&self, tenant_id: &str, invitation_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::Invitation, Error>>>>;
    fn get_tenant_invitations(&self, tenant_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::Invitations, Error>>>>;
    fn validate_invitation(&self, invitation_id: &str, validate_invitation_param: Option<crate::models::ValidateInvitationParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
}

impl<C: hyper::client::connect::Connect>InvitationApi for InvitationApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn create_tenant_invitation(&self, tenant_id: &str, create_tenant_invitation_param: Option<crate::models::CreateTenantInvitationParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::Invitation, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/tenants/{tenant_id}/invitations".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_body_param(create_tenant_invitation_param);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_tenant_invitation(&self, tenant_id: &str, invitation_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/tenants/{tenant_id}/invitations/{invitation_id}".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("invitation_id".to_string(), invitation_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_invitation_validity(&self, invitation_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::InvitationValidity, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/invitations/{invitation_id}/validity".to_string())
        ;
        req = req.with_path_param("invitation_id".to_string(), invitation_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_tenant_invitation(&self, tenant_id: &str, invitation_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::Invitation, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/tenants/{tenant_id}/invitations/{invitation_id}".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("invitation_id".to_string(), invitation_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_tenant_invitations(&self, tenant_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::Invitations, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/tenants/{tenant_id}/invitations".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn validate_invitation(&self, invitation_id: &str, validate_invitation_param: Option<crate::models::ValidateInvitationParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PATCH, "/invitations/{invitation_id}/validate".to_string())
        ;
        req = req.with_path_param("invitation_id".to_string(), invitation_id.to_string());
        req = req.with_body_param(validate_invitation_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
