/*
 * SaaSus Auth API Schema
 *
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct TenantApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> TenantApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> TenantApiClient<C> {
        TenantApiClient {
            configuration,
        }
    }
}

pub trait TenantApi {
    fn create_tenant(&self, body: Option<crate::models::TenantProps>) -> Pin<Box<dyn Future<Output = Result<crate::models::Tenant, Error>>>>;
    fn create_tenant_and_pricing(&self, ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn delete_stripe_tenant_and_pricing(&self, ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn delete_tenant(&self, tenant_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn get_tenant(&self, tenant_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::TenantDetail, Error>>>>;
    fn get_tenant_identity_providers(&self, tenant_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::TenantIdentityProviders, Error>>>>;
    fn get_tenants(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::Tenants, Error>>>>;
    fn reset_plan(&self, ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn update_tenant(&self, tenant_id: &str, body: Option<crate::models::TenantProps>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn update_tenant_billing_info(&self, tenant_id: &str, body: Option<crate::models::BillingInfo>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn update_tenant_identity_provider(&self, tenant_id: &str, update_tenant_identity_provider_param: Option<crate::models::UpdateTenantIdentityProviderParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn update_tenant_plan(&self, tenant_id: &str, body: Option<crate::models::PlanReservation>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
}

impl<C: hyper::client::connect::Connect>TenantApi for TenantApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn create_tenant(&self, body: Option<crate::models::TenantProps>) -> Pin<Box<dyn Future<Output = Result<crate::models::Tenant, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/tenants".to_string())
        ;
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_tenant_and_pricing(&self, ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PATCH, "/stripe/init".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_stripe_tenant_and_pricing(&self, ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/stripe".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_tenant(&self, tenant_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/tenants/{tenant_id}".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_tenant(&self, tenant_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::TenantDetail, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/tenants/{tenant_id}".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_tenant_identity_providers(&self, tenant_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::TenantIdentityProviders, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/tenants/{tenant_id}/identity-providers".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_tenants(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::Tenants, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/tenants".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn reset_plan(&self, ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/plans/reset".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_tenant(&self, tenant_id: &str, body: Option<crate::models::TenantProps>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PATCH, "/tenants/{tenant_id}".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_tenant_billing_info(&self, tenant_id: &str, body: Option<crate::models::BillingInfo>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/tenants/{tenant_id}/billing-info".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_tenant_identity_provider(&self, tenant_id: &str, update_tenant_identity_provider_param: Option<crate::models::UpdateTenantIdentityProviderParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/tenants/{tenant_id}/identity-providers".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_body_param(update_tenant_identity_provider_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_tenant_plan(&self, tenant_id: &str, body: Option<crate::models::PlanReservation>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/tenants/{tenant_id}/plans".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
