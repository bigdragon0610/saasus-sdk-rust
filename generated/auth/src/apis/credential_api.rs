/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct CredentialApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> CredentialApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> CredentialApiClient<C> {
        CredentialApiClient {
            configuration,
        }
    }
}

pub trait CredentialApi {
    fn create_auth_credentials(&self, body: Option<crate::models::Credentials>) -> Pin<Box<dyn Future<Output = Result<crate::models::AuthorizationTempCode, Error>>>>;
    fn get_auth_credentials(&self, code: Option<&str>, auth_flow: Option<&str>, refresh_token: Option<&str>) -> Pin<Box<dyn Future<Output = Result<crate::models::Credentials, Error>>>>;
}

impl<C: hyper::client::connect::Connect>CredentialApi for CredentialApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn create_auth_credentials(&self, body: Option<crate::models::Credentials>) -> Pin<Box<dyn Future<Output = Result<crate::models::AuthorizationTempCode, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/credentials".to_string())
        ;
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_auth_credentials(&self, code: Option<&str>, auth_flow: Option<&str>, refresh_token: Option<&str>) -> Pin<Box<dyn Future<Output = Result<crate::models::Credentials, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/credentials".to_string())
        ;
        if let Some(ref s) = code {
            let query_value = s.to_string();
            req = req.with_query_param("code".to_string(), query_value);
        }
        if let Some(ref s) = auth_flow {
            let query_value = s.to_string();
            req = req.with_query_param("auth-flow".to_string(), query_value);
        }
        if let Some(ref s) = refresh_token {
            let query_value = s.to_string();
            req = req.with_query_param("refresh-token".to_string(), query_value);
        }

        req.execute(self.configuration.borrow())
    }

}
