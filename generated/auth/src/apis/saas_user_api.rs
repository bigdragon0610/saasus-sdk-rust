/*
 * SaaSus Auth API Schema
 *
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct SaasUserApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> SaasUserApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> SaasUserApiClient<C> {
        SaasUserApiClient {
            configuration,
        }
    }
}

pub trait SaasUserApi {
    fn confirm_email_update(&self, user_id: &str, confirm_email_update_param: Option<crate::models::ConfirmEmailUpdateParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn confirm_external_user_link(&self, confirm_external_user_link_param: Option<crate::models::ConfirmExternalUserLinkParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn confirm_sign_up_with_aws_marketplace(&self, confirm_sign_up_with_aws_marketplace_param: Option<crate::models::ConfirmSignUpWithAwsMarketplaceParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::Tenant, Error>>>>;
    fn create_saas_user(&self, create_saas_user_param: Option<crate::models::CreateSaasUserParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::SaasUser, Error>>>>;
    fn create_secret_code(&self, user_id: &str, create_secret_code_param: Option<crate::models::CreateSecretCodeParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::SoftwareTokenSecretCode, Error>>>>;
    fn delete_saas_user(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn get_saas_user(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::SaasUser, Error>>>>;
    fn get_saas_users(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::SaasUsers, Error>>>>;
    fn get_user_mfa_preference(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::MfaPreference, Error>>>>;
    fn link_aws_marketplace(&self, link_aws_marketplace_param: Option<crate::models::LinkAwsMarketplaceParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn request_email_update(&self, user_id: &str, request_email_update_param: Option<crate::models::RequestEmailUpdateParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn request_external_user_link(&self, request_external_user_link_param: Option<crate::models::RequestExternalUserLinkParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn resend_sign_up_confirmation_email(&self, resend_sign_up_confirmation_email_param: Option<crate::models::ResendSignUpConfirmationEmailParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn sign_up(&self, sign_up_param: Option<crate::models::SignUpParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::SaasUser, Error>>>>;
    fn sign_up_with_aws_marketplace(&self, sign_up_with_aws_marketplace_param: Option<crate::models::SignUpWithAwsMarketplaceParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::SaasUser, Error>>>>;
    fn unlink_provider(&self, provider_name: &str, user_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn update_saas_user_email(&self, user_id: &str, update_saas_user_email_param: Option<crate::models::UpdateSaasUserEmailParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn update_saas_user_password(&self, user_id: &str, update_saas_user_password_param: Option<crate::models::UpdateSaasUserPasswordParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn update_software_token(&self, user_id: &str, update_software_token_param: Option<crate::models::UpdateSoftwareTokenParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn update_user_mfa_preference(&self, user_id: &str, body: Option<crate::models::MfaPreference>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
}

impl<C: hyper::client::connect::Connect>SaasUserApi for SaasUserApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn confirm_email_update(&self, user_id: &str, confirm_email_update_param: Option<crate::models::ConfirmEmailUpdateParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/users/{user_id}/email/confirm".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_body_param(confirm_email_update_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn confirm_external_user_link(&self, confirm_external_user_link_param: Option<crate::models::ConfirmExternalUserLinkParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/external-users/confirm".to_string())
        ;
        req = req.with_body_param(confirm_external_user_link_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn confirm_sign_up_with_aws_marketplace(&self, confirm_sign_up_with_aws_marketplace_param: Option<crate::models::ConfirmSignUpWithAwsMarketplaceParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::Tenant, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/aws-marketplace/sign-up-confirm".to_string())
        ;
        req = req.with_body_param(confirm_sign_up_with_aws_marketplace_param);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_saas_user(&self, create_saas_user_param: Option<crate::models::CreateSaasUserParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::SaasUser, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/users".to_string())
        ;
        req = req.with_body_param(create_saas_user_param);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_secret_code(&self, user_id: &str, create_secret_code_param: Option<crate::models::CreateSecretCodeParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::SoftwareTokenSecretCode, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/users/{user_id}/mfa/software-token/secret-code".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_body_param(create_secret_code_param);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_saas_user(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/users/{user_id}".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_saas_user(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::SaasUser, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/users/{user_id}".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_saas_users(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::SaasUsers, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/users".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_user_mfa_preference(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::MfaPreference, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/users/{user_id}/mfa/preference".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn link_aws_marketplace(&self, link_aws_marketplace_param: Option<crate::models::LinkAwsMarketplaceParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PATCH, "/aws-marketplace/link".to_string())
        ;
        req = req.with_body_param(link_aws_marketplace_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn request_email_update(&self, user_id: &str, request_email_update_param: Option<crate::models::RequestEmailUpdateParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/users/{user_id}/email/request".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_body_param(request_email_update_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn request_external_user_link(&self, request_external_user_link_param: Option<crate::models::RequestExternalUserLinkParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/external-users/request".to_string())
        ;
        req = req.with_body_param(request_external_user_link_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn resend_sign_up_confirmation_email(&self, resend_sign_up_confirmation_email_param: Option<crate::models::ResendSignUpConfirmationEmailParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/sign-up/resend".to_string())
        ;
        req = req.with_body_param(resend_sign_up_confirmation_email_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn sign_up(&self, sign_up_param: Option<crate::models::SignUpParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::SaasUser, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/sign-up".to_string())
        ;
        req = req.with_body_param(sign_up_param);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn sign_up_with_aws_marketplace(&self, sign_up_with_aws_marketplace_param: Option<crate::models::SignUpWithAwsMarketplaceParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::SaasUser, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/aws-marketplace/sign-up".to_string())
        ;
        req = req.with_body_param(sign_up_with_aws_marketplace_param);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn unlink_provider(&self, provider_name: &str, user_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/users/{user_id}/providers/{provider_name}".to_string())
        ;
        req = req.with_path_param("provider_name".to_string(), provider_name.to_string());
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_saas_user_email(&self, user_id: &str, update_saas_user_email_param: Option<crate::models::UpdateSaasUserEmailParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PATCH, "/users/{user_id}/email".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_body_param(update_saas_user_email_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_saas_user_password(&self, user_id: &str, update_saas_user_password_param: Option<crate::models::UpdateSaasUserPasswordParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PATCH, "/users/{user_id}/password".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_body_param(update_saas_user_password_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_software_token(&self, user_id: &str, update_software_token_param: Option<crate::models::UpdateSoftwareTokenParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/users/{user_id}/mfa/software-token".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_body_param(update_software_token_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_user_mfa_preference(&self, user_id: &str, body: Option<crate::models::MfaPreference>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PATCH, "/users/{user_id}/mfa/preference".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
