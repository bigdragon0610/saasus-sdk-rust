/*
 * SaaSus Auth API Schema
 *
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct AuthInfoApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> AuthInfoApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> AuthInfoApiClient<C> {
        AuthInfoApiClient {
            configuration,
        }
    }
}

pub trait AuthInfoApi {
    fn get_auth_info(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::AuthInfo, Error>>>>;
    fn get_identity_providers(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::IdentityProviders, Error>>>>;
    fn get_sign_in_settings(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::SignInSettings, Error>>>>;
    fn update_auth_info(&self, body: Option<crate::models::AuthInfo>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn update_identity_provider(&self, update_identity_provider_param: Option<crate::models::UpdateIdentityProviderParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn update_sign_in_settings(&self, update_sign_in_settings_param: Option<crate::models::UpdateSignInSettingsParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
}

impl<C: hyper::client::connect::Connect>AuthInfoApi for AuthInfoApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn get_auth_info(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::AuthInfo, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/auth-info".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_identity_providers(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::IdentityProviders, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/identity-providers".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_sign_in_settings(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::SignInSettings, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/sign-in-settings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_auth_info(&self, body: Option<crate::models::AuthInfo>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/auth-info".to_string())
        ;
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_identity_provider(&self, update_identity_provider_param: Option<crate::models::UpdateIdentityProviderParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/identity-providers".to_string())
        ;
        req = req.with_body_param(update_identity_provider_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_sign_in_settings(&self, update_sign_in_settings_param: Option<crate::models::UpdateSignInSettingsParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/sign-in-settings".to_string())
        ;
        req = req.with_body_param(update_sign_in_settings_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
