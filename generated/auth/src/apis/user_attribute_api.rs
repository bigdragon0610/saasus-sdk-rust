/*
 * SaaSus Auth API Schema
 *
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct UserAttributeApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> UserAttributeApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> UserAttributeApiClient<C> {
        UserAttributeApiClient {
            configuration,
        }
    }
}

pub trait UserAttributeApi {
    fn create_user_attribute(&self, body: Option<crate::models::Attribute>) -> Pin<Box<dyn Future<Output = Result<crate::models::Attribute, Error>>>>;
    fn delete_user_attribute(&self, attribute_name: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn get_user_attributes(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::UserAttributes, Error>>>>;
}

impl<C: hyper::client::connect::Connect>UserAttributeApi for UserAttributeApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn create_user_attribute(&self, body: Option<crate::models::Attribute>) -> Pin<Box<dyn Future<Output = Result<crate::models::Attribute, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/user-attributes".to_string())
        ;
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_user_attribute(&self, attribute_name: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/user-attributes/{attribute_name}".to_string())
        ;
        req = req.with_path_param("attribute_name".to_string(), attribute_name.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_user_attributes(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::UserAttributes, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/user-attributes".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

}
