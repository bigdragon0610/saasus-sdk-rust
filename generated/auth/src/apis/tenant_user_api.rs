/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct TenantUserApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> TenantUserApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> TenantUserApiClient<C> {
        TenantUserApiClient {
            configuration,
        }
    }
}

pub trait TenantUserApi {
    fn create_tenant_user(&self, tenant_id: &str, create_tenant_user_param: Option<crate::models::CreateTenantUserParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::User, Error>>>>;
    fn create_tenant_user_roles(&self, tenant_id: &str, user_id: &str, env_id: i32, create_tenant_user_roles_param: Option<crate::models::CreateTenantUserRolesParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn delete_tenant_user(&self, tenant_id: &str, user_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn delete_tenant_user_role(&self, tenant_id: &str, user_id: &str, env_id: i32, role_name: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn get_all_tenant_user(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::Users, Error>>>>;
    fn get_all_tenant_users(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::Users, Error>>>>;
    fn get_tenant_user(&self, tenant_id: &str, user_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::User, Error>>>>;
    fn get_tenant_users(&self, tenant_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::Users, Error>>>>;
    fn update_tenant_user(&self, tenant_id: &str, user_id: &str, update_tenant_user_param: Option<crate::models::UpdateTenantUserParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
}

impl<C: hyper::client::connect::Connect>TenantUserApi for TenantUserApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn create_tenant_user(&self, tenant_id: &str, create_tenant_user_param: Option<crate::models::CreateTenantUserParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::User, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/tenants/{tenant_id}/users".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_body_param(create_tenant_user_param);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_tenant_user_roles(&self, tenant_id: &str, user_id: &str, env_id: i32, create_tenant_user_roles_param: Option<crate::models::CreateTenantUserRolesParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/tenants/{tenant_id}/users/{user_id}/envs/{env_id}/roles".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_path_param("env_id".to_string(), env_id.to_string());
        req = req.with_body_param(create_tenant_user_roles_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_tenant_user(&self, tenant_id: &str, user_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/tenants/{tenant_id}/users/{user_id}".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_tenant_user_role(&self, tenant_id: &str, user_id: &str, env_id: i32, role_name: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/tenants/{tenant_id}/users/{user_id}/envs/{env_id}/roles/{role_name}".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_path_param("env_id".to_string(), env_id.to_string());
        req = req.with_path_param("role_name".to_string(), role_name.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_all_tenant_user(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::Users, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/tenants/all/users/{user_id}".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_all_tenant_users(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::Users, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/tenants/all/users".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_tenant_user(&self, tenant_id: &str, user_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::User, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/tenants/{tenant_id}/users/{user_id}".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("user_id".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_tenant_users(&self, tenant_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::Users, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/tenants/{tenant_id}/users".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_tenant_user(&self, tenant_id: &str, user_id: &str, update_tenant_user_param: Option<crate::models::UpdateTenantUserParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PATCH, "/tenants/{tenant_id}/users/{user_id}".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_body_param(update_tenant_user_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
