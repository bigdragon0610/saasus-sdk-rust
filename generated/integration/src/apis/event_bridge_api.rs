/*
 * SaaSus Eventbridge API Schema
 *
 * SaaSus Eventbridge API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct EventBridgeApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> EventBridgeApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> EventBridgeApiClient<C> {
        EventBridgeApiClient {
            configuration,
        }
    }
}

pub trait EventBridgeApi {
    fn create_event_bridge_event(&self, create_event_bridge_event_param: Option<crate::models::CreateEventBridgeEventParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn create_event_bridge_test_event(&self, ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn delete_event_bridge_settings(&self, ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn get_event_bridge_settings(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::EventBridgeSettings, Error>>>>;
    fn save_event_bridge_settings(&self, body: Option<crate::models::EventBridgeSettings>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
}

impl<C: hyper::client::connect::Connect>EventBridgeApi for EventBridgeApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn create_event_bridge_event(&self, create_event_bridge_event_param: Option<crate::models::CreateEventBridgeEventParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/eventbridge/event".to_string())
        ;
        req = req.with_body_param(create_event_bridge_event_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_event_bridge_test_event(&self, ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/eventbridge/test-event".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_event_bridge_settings(&self, ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/eventbridge/info".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_event_bridge_settings(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::EventBridgeSettings, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/eventbridge/info".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn save_event_bridge_settings(&self, body: Option<crate::models::EventBridgeSettings>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/eventbridge/info".to_string())
        ;
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
