/*
 * SaaSus ApiLog API Schema
 *
 * SaaSus ApiLog API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct ApiLogApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> ApiLogApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> ApiLogApiClient<C> {
        ApiLogApiClient {
            configuration,
        }
    }
}

pub trait ApiLogApi {
    fn get_log(&self, api_log_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::ApiLog, Error>>>>;
    fn get_logs(&self, created_date: Option<String>, created_at: Option<String>, limit: Option<i64>, cursor: Option<&str>) -> Pin<Box<dyn Future<Output = Result<crate::models::ApiLogs, Error>>>>;
}

impl<C: hyper::client::connect::Connect>ApiLogApi for ApiLogApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn get_log(&self, api_log_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::ApiLog, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/logs/{api_log_id}".to_string())
        ;
        req = req.with_path_param("api_log_id".to_string(), api_log_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_logs(&self, created_date: Option<String>, created_at: Option<String>, limit: Option<i64>, cursor: Option<&str>) -> Pin<Box<dyn Future<Output = Result<crate::models::ApiLogs, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/logs".to_string())
        ;
        if let Some(ref s) = created_date {
            let query_value = s.to_string();
            req = req.with_query_param("created_date".to_string(), query_value);
        }
        if let Some(ref s) = created_at {
            let query_value = s.to_string();
            req = req.with_query_param("created_at".to_string(), query_value);
        }
        if let Some(ref s) = limit {
            let query_value = s.to_string();
            req = req.with_query_param("limit".to_string(), query_value);
        }
        if let Some(ref s) = cursor {
            let query_value = s.to_string();
            req = req.with_query_param("cursor".to_string(), query_value);
        }

        req.execute(self.configuration.borrow())
    }

}
