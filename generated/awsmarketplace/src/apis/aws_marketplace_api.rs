/*
 * SaaSus AWS Marketplace API Schema
 *
 * SaaSus AWS Marketplace API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct AwsMarketplaceApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> AwsMarketplaceApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> AwsMarketplaceApiClient<C> {
        AwsMarketplaceApiClient {
            configuration,
        }
    }
}

pub trait AwsMarketplaceApi {
    fn create_customer(&self, create_customer_param: Option<crate::models::CreateCustomerParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::Customer, Error>>>>;
    fn get_catalog_entity_visibility(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::CatalogEntityVisibility, Error>>>>;
    fn get_cloud_formation_launch_stack_link(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::CloudFormationLaunchStackLink, Error>>>>;
    fn get_customer(&self, customer_identifier: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::Customer, Error>>>>;
    fn get_customers(&self, tenant_ids: Option<Vec<String>>) -> Pin<Box<dyn Future<Output = Result<crate::models::Customers, Error>>>>;
    fn get_listing_status(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::GetListingStatusResult, Error>>>>;
    fn get_plan_by_plan_name(&self, plan_name: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::Plan, Error>>>>;
    fn get_plans(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::Plans, Error>>>>;
    fn get_settings(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::Settings, Error>>>>;
    fn save_plan(&self, save_plan_param: Option<crate::models::SavePlanParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn sync_customer(&self, customer_identifier: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn update_listing_status(&self, update_listing_status_param: Option<crate::models::UpdateListingStatusParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn update_settings(&self, update_settings_param: Option<crate::models::UpdateSettingsParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn verify_registration_token(&self, verify_registration_token_param: Option<crate::models::VerifyRegistrationTokenParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
}

impl<C: hyper::client::connect::Connect>AwsMarketplaceApi for AwsMarketplaceApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn create_customer(&self, create_customer_param: Option<crate::models::CreateCustomerParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::Customer, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/customers".to_string())
        ;
        req = req.with_body_param(create_customer_param);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_catalog_entity_visibility(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::CatalogEntityVisibility, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/catalog-entity/visibility".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cloud_formation_launch_stack_link(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::CloudFormationLaunchStackLink, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/cloudformation-launch-stack-link".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_customer(&self, customer_identifier: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::Customer, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/customers/{customer_identifier}".to_string())
        ;
        req = req.with_path_param("customer_identifier".to_string(), customer_identifier.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_customers(&self, tenant_ids: Option<Vec<String>>) -> Pin<Box<dyn Future<Output = Result<crate::models::Customers, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/customers".to_string())
        ;
        if let Some(ref s) = tenant_ids {
            let query_value = s.iter().map(|s| s.to_string()).collect::<Vec<String>>().join(",");
            req = req.with_query_param("tenant_ids".to_string(), query_value);
        }

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_listing_status(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::GetListingStatusResult, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/listing-status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_plan_by_plan_name(&self, plan_name: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::Plan, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/plans/{plan_name}".to_string())
        ;
        req = req.with_path_param("plan_name".to_string(), plan_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_plans(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::Plans, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/plans".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_settings(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::Settings, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/settings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn save_plan(&self, save_plan_param: Option<crate::models::SavePlanParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/plans".to_string())
        ;
        req = req.with_body_param(save_plan_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn sync_customer(&self, customer_identifier: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/customers/{customer_identifier}/sync".to_string())
        ;
        req = req.with_path_param("customer_identifier".to_string(), customer_identifier.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_listing_status(&self, update_listing_status_param: Option<crate::models::UpdateListingStatusParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/listing-status".to_string())
        ;
        req = req.with_body_param(update_listing_status_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_settings(&self, update_settings_param: Option<crate::models::UpdateSettingsParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/settings".to_string())
        ;
        req = req.with_body_param(update_settings_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn verify_registration_token(&self, verify_registration_token_param: Option<crate::models::VerifyRegistrationTokenParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/registration-token/verify".to_string())
        ;
        req = req.with_body_param(verify_registration_token_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
