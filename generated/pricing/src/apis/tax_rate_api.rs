/*
 * SaaSus Pricing API Schema
 *
 * SaaSus Pricing API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct TaxRateApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> TaxRateApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> TaxRateApiClient<C> {
        TaxRateApiClient {
            configuration,
        }
    }
}

pub trait TaxRateApi {
    fn create_tax_rate(&self, body: Option<crate::models::TaxRateProps>) -> Pin<Box<dyn Future<Output = Result<crate::models::TaxRate, Error>>>>;
    fn get_tax_rates(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::TaxRates, Error>>>>;
    fn update_tax_rate(&self, tax_rate_id: &str, update_tax_rate_param: Option<crate::models::UpdateTaxRateParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
}

impl<C: hyper::client::connect::Connect>TaxRateApi for TaxRateApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn create_tax_rate(&self, body: Option<crate::models::TaxRateProps>) -> Pin<Box<dyn Future<Output = Result<crate::models::TaxRate, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/tax-rates".to_string())
        ;
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_tax_rates(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::TaxRates, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/tax-rates".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_tax_rate(&self, tax_rate_id: &str, update_tax_rate_param: Option<crate::models::UpdateTaxRateParam>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PATCH, "/tax-rates/{tax_rate_id}".to_string())
        ;
        req = req.with_path_param("tax_rate_id".to_string(), tax_rate_id.to_string());
        req = req.with_body_param(update_tax_rate_param);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
