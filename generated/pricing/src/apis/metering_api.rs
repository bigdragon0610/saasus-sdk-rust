/*
 * SaaSus Pricing API Schema
 *
 * SaaSus Pricing API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct MeteringApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> MeteringApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> MeteringApiClient<C> {
        MeteringApiClient {
            configuration,
        }
    }
}

pub trait MeteringApi {
    fn delete_metering_unit_timestamp_count(&self, tenant_id: &str, metering_unit_name: &str, timestamp: i32) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date(&self, tenant_id: &str, metering_unit_name: &str, date: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitDateCount, Error>>>>;
    fn get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date_period(&self, tenant_id: &str, metering_unit_name: &str, start_timestamp: Option<i32>, end_timestamp: Option<i32>) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitDatePeriodCounts, Error>>>>;
    fn get_metering_unit_date_count_by_tenant_id_and_unit_name_today(&self, tenant_id: &str, metering_unit_name: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitDateCount, Error>>>>;
    fn get_metering_unit_date_counts_by_tenant_id_and_date(&self, tenant_id: &str, date: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitDateCounts, Error>>>>;
    fn get_metering_unit_month_count_by_tenant_id_and_unit_name_and_month(&self, tenant_id: &str, metering_unit_name: &str, month: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitMonthCount, Error>>>>;
    fn get_metering_unit_month_count_by_tenant_id_and_unit_name_this_month(&self, tenant_id: &str, metering_unit_name: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitMonthCount, Error>>>>;
    fn get_metering_unit_month_counts_by_tenant_id_and_month(&self, tenant_id: &str, month: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitMonthCounts, Error>>>>;
    fn update_metering_unit_timestamp_count(&self, tenant_id: &str, metering_unit_name: &str, timestamp: i32, update_metering_unit_timestamp_count_param: Option<crate::models::UpdateMeteringUnitTimestampCountParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitTimestampCount, Error>>>>;
    fn update_metering_unit_timestamp_count_now(&self, tenant_id: &str, metering_unit_name: &str, update_metering_unit_timestamp_count_now_param: Option<crate::models::UpdateMeteringUnitTimestampCountNowParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitTimestampCount, Error>>>>;
}

impl<C: hyper::client::connect::Connect>MeteringApi for MeteringApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn delete_metering_unit_timestamp_count(&self, tenant_id: &str, metering_unit_name: &str, timestamp: i32) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/metering/tenants/{tenant_id}/units/{metering_unit_name}/timestamp/{timestamp}".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("metering_unit_name".to_string(), metering_unit_name.to_string());
        req = req.with_path_param("timestamp".to_string(), timestamp.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date(&self, tenant_id: &str, metering_unit_name: &str, date: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitDateCount, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/metering/tenants/{tenant_id}/units/{metering_unit_name}/date/{date}".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("metering_unit_name".to_string(), metering_unit_name.to_string());
        req = req.with_path_param("date".to_string(), date.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date_period(&self, tenant_id: &str, metering_unit_name: &str, start_timestamp: Option<i32>, end_timestamp: Option<i32>) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitDatePeriodCounts, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/metering/tenants/{tenant_id}/units/{metering_unit_name}/date-period".to_string())
        ;
        if let Some(ref s) = start_timestamp {
            let query_value = s.to_string();
            req = req.with_query_param("start_timestamp".to_string(), query_value);
        }
        if let Some(ref s) = end_timestamp {
            let query_value = s.to_string();
            req = req.with_query_param("end_timestamp".to_string(), query_value);
        }
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("metering_unit_name".to_string(), metering_unit_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_metering_unit_date_count_by_tenant_id_and_unit_name_today(&self, tenant_id: &str, metering_unit_name: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitDateCount, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/metering/tenants/{tenant_id}/units/{metering_unit_name}/today".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("metering_unit_name".to_string(), metering_unit_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_metering_unit_date_counts_by_tenant_id_and_date(&self, tenant_id: &str, date: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitDateCounts, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/metering/tenants/{tenant_id}/units/date/{date}".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("date".to_string(), date.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_metering_unit_month_count_by_tenant_id_and_unit_name_and_month(&self, tenant_id: &str, metering_unit_name: &str, month: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitMonthCount, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/metering/tenants/{tenant_id}/units/{metering_unit_name}/month/{month}".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("metering_unit_name".to_string(), metering_unit_name.to_string());
        req = req.with_path_param("month".to_string(), month.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_metering_unit_month_count_by_tenant_id_and_unit_name_this_month(&self, tenant_id: &str, metering_unit_name: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitMonthCount, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/metering/tenants/{tenant_id}/units/{metering_unit_name}/thismonth".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("metering_unit_name".to_string(), metering_unit_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_metering_unit_month_counts_by_tenant_id_and_month(&self, tenant_id: &str, month: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitMonthCounts, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/metering/tenants/{tenant_id}/units/month/{month}".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("month".to_string(), month.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_metering_unit_timestamp_count(&self, tenant_id: &str, metering_unit_name: &str, timestamp: i32, update_metering_unit_timestamp_count_param: Option<crate::models::UpdateMeteringUnitTimestampCountParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitTimestampCount, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/metering/tenants/{tenant_id}/units/{metering_unit_name}/timestamp/{timestamp}".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("metering_unit_name".to_string(), metering_unit_name.to_string());
        req = req.with_path_param("timestamp".to_string(), timestamp.to_string());
        req = req.with_body_param(update_metering_unit_timestamp_count_param);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_metering_unit_timestamp_count_now(&self, tenant_id: &str, metering_unit_name: &str, update_metering_unit_timestamp_count_now_param: Option<crate::models::UpdateMeteringUnitTimestampCountNowParam>) -> Pin<Box<dyn Future<Output = Result<crate::models::MeteringUnitTimestampCount, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/metering/tenants/{tenant_id}/units/{metering_unit_name}/now".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("metering_unit_name".to_string(), metering_unit_name.to_string());
        req = req.with_body_param(update_metering_unit_timestamp_count_now_param);

        req.execute(self.configuration.borrow())
    }

}
